.zust-input {
  appearance: none;
  border-style: solid;
  border-width: 0;
  border-bottom-width: 2px;
  border-color: $transparent;
  color: var(--input-text-color);
  margin: 4px;
  $padding1: 7px;
  $padding2: 20px;
  padding-top: 9px;
  padding-bottom: $padding1;
  padding-left: $padding2;
  padding-right: $padding2;
  background-color: var(--input-bg-color);
  width: 100%;

  @if $css-variable-enabled {
    transition: var(--primary-transition);
    border-radius: var(--input-border-radius);
    font-size: var(--medium-text);
  } @else {
    transition: $primary-transition;
    border-radius: $input-border-radius;
    font-size: $medium-text;
  }

  // Reuse Vars
  --in-pad: 35px;

  ~ .zust-icon {
    --icon-size: 18px;
    --ic-margin: 10px;
    position: absolute !important;
    top: 50%;
    transform: translateY(-50%);
    margin: {
      top: 0 !important;
      bottom: 0 !important;
    }

    &.zust-left {
      left: 0;
      margin-right: 0 !important;
      margin-left: var(--ic-margin);
    }

    &.zust-right {
      right: 0;
      margin-left: 0 !important;
      margin-right: var(--ic-margin);
    }
  }

  &.zust-with-icon-left {
    padding-left: var(--in-pad) !important;
  }

  &.zust-with-icon-right {
    padding-right: var(--in-pad) !important;
  }

  &.zust-with-icon-both {
    padding-right: var(--in-pad) !important;
    padding-left: var(--in-pad) !important;
  }

  &.zust-small {
    @if $css-variable-enabled {
      font-size: var(--small-text);
    } @else {
      font-size: $small-text;
    }
    $padding1: 4px;
    $padding2: 14px;
    padding-top: $padding1 + 2px;
    padding-bottom: $padding1;
    padding-left: $padding2;
    padding-right: $padding2;

    --in-pad: 25px;

    ~ .zust-icon {
      --icon-size: 12px;
      --ic-margin: 8px;
    }
  }

  &.zust-large {
    @if $css-variable-enabled {
      font-size: var(--large-text);
    } @else {
      font-size: $large-text;
    }
    $padding1: 12px;
    $padding2: 24px;
    padding-top: $padding1 + 2px;
    padding-bottom: $padding1;
    padding-left: $padding2;
    padding-right: $padding2;

    --in-pad: 45px;

    ~ .zust-icon {
      --icon-size: 24px;
      --ic-margin: 14px;
    }
  }

  &.zust-xlarge {
    @if $css-variable-enabled {
      font-size: var(--xlarge-text);
    } @else {
      font-size: $xlarge-text;
    }
    $padding1: 16px;
    $padding2: 28px;
    padding-top: $padding1 + 2px;
    padding-bottom: $padding1;
    padding-left: $padding2;
    padding-right: $padding2;

    --in-pad: 55px;

    ~ .zust-icon {
      --icon-size: 36px;
      --ic-margin: 13px;
    }
  }

  &::placeholder {
    color: var(--input-placeholder-text-color);
  }

  &:hover, &.zust-hovered {
    background-color: var(--input-hovered-bg-color);
  }

  &:focus, &.zust-focused {
    background-color: var(--body-color-primary);
    @if $css-variable-enabled {
      box-shadow: 0 0 0 var(--input-border-spread) var(--input-border-color);
    } @else {
      box-shadow: 0 0 0 $input-border-spread var(--input-border-color);
    }
  }

  &[disabled] {
    pointer-events: none;
    opacity: 0.4;

    ~ .zust-icon {
      opacity: 0.4;
    }
  }

  // Readonly
  &.zust-readonly, &[readonly] {

    &:hover, &.zust-hovered {
      background-color: var(--input-bg-color);
    }

    &:focus, &.zust-focused {
      background-color: var(--input-bg-color);
      box-shadow: 0 0 0 1px var(--input-border-color);
    }
  }

  // Validity Check
  &.zust-check-validity {
    & ~ .zust-icon.zust-if-valid {
      opacity: 0;
    }

    &:valid {
      border-color: var(--success-color);

      &:focus, &.zust-focused {
        border-color: $transparent;
        @if $css-variable-enabled {
          box-shadow: 0 0 0 var(--input-border-spread) var(--success-color);
        } @else {
          box-shadow: 0 0 0 $input-border-spread var(--success-color);
        }
      }

      & ~ .zust-icon.zust-if-valid {
        opacity: 1;
      }
    }
  }

  .zust-el-group &, .zust-el-group > .zust-input-container & {
    margin: 0 !important;
  }

  // Colors
  @each $name, $color, $skip, $hovered-color in $item-colors {
    &.zust-#{$name} {
      border-color: $color;

      &:focus, &.zust-focused {
        border-color: $transparent;
        box-shadow: 0 0 0 $input-border-spread $hovered-color;
        @if $css-variable-enabled {
          box-shadow: 0 0 0 var(--input-border-spread) $hovered-color;
        } @else {
          box-shadow: 0 0 0 $input-border-spread $hovered-color;
        }
      }

      &.zust-readonly, &[readonly] {
        &:focus, &.zust-focused {
          box-shadow: 0 0 0 1px $hovered-color;
        }
      }
    }
  }
}

.zust-input-append, .zust-input-prepend {
  display: inline-flex;
  background-color: black;
  align-items: center;
  justify-content: center;
  padding: 10px;
  background-color: var(--input-append-bg-color);
  color: var(--input-append-fg-color);
  pointer-events: none;
  user-select: none;

  @if $css-variable-enabled {

  } @else {
    border-radius: $input-border-radius;
    transition: $primary-transition;
  }
}

// In Container
.zust-input-container {
  margin: 0;
  display: inline-flex;
  position: relative;

  &:not(:last-child) {
    margin-bottom: 8px;
    margin-right: 8px;
  }

  .zust-input {
    margin: 0;
  }

  .zust-el-group > & > .zust-input {
    border-radius: 0;
  }

  .zust-el-group &:first-child .zust-input {
    @if $css-variable-enabled {
      border-radius: var(--input-border-radius) 0 0 var(--input-border-radius);
    } @else {
      border-radius: $input-border-radius 0 0 $input-border-radius;
    }
  }

  .zust-el-group &:last-child .zust-input {
    @if $css-variable-enabled {
      border-radius: 0 var(--input-border-radius) var(--input-border-radius) 0;
    } @else {
      border-radius: 0 $input-border-radius $input-border-radius 0;
    }
  }
}
